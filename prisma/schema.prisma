// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    games         Game[]
    // gameSessions  GameSession[]
}

model Game {
    id         Int        @id @unique
    title      String
    image      String?
    playTime   Int
    maxPlayers Int
    minPlayers Int
    complexity Float
    users      User[]
    mechanics  Mechanic[]
    // gameSessions GameSession[]
}

//many mechanics may be tied to many games.
model Mechanic {
    id           Int    @id @unique @default(autoincrement())
    mechanicText String
    games        Game[]
}

//one session to one game
//one game to many sessions
// model GameSession {
//     id          String   @id @unique
//     comment     String?
//     whoWasThere String?
//     duration    Int?
//     gameId      String
//     userId      String
//     game        Game     @relation(fields: [gameId], references: [id])
//     user        User     @relation(fields: [userId], references: [id])
//     createdAt   DateTime @default(now())

//     @@index([gameId])
//     @@index([userId])
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   role    Role     @default(USER)
//   posts   Post[]
//   profile Profile?
// }

//the user references the Post schema. 

// model Profile {
//   id     Int    @id @default(autoincrement())
//   bio    String
//   user   User   @relation(fields: [userId], references: [id])
//   userId Int    @unique
// }

//the Profile schema references the USer schema. 

// model Post {
//   id         Int        @id @default(autoincrement())
//   createdAt  DateTime   @default(now())
//   updatedAt  DateTime   @updatedAt
//   title      String
//   published  Boolean    @default(false)
//   author     User       @relation(fields: [authorId], references: [id])
//   authorId   Int
//   categories Category[]
// }

// model Category {
//   id    Int    @id @default(autoincrement())
//   name  String
//   posts Post[]
// }
