generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        Int      @id(map: "idx_32775_PRIMARY") @default(autoincrement())
  name      String   @db.VarChar(191)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@index([name], map: "idx_32775_Example_name_idx")
}

model Account {
  id                String  @id(map: "idx_32769_PRIMARY") @default(cuid()) @db.VarChar(191)
  userId            String  @db.VarChar(191)
  type              String  @db.VarChar(191)
  provider          String  @db.VarChar(191)
  providerAccountId String  @db.VarChar(191)
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String? @db.VarChar(191)
  scope             String? @db.VarChar(191)
  id_token          String?
  session_state     String? @db.VarChar(191)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], map: "idx_32769_Account_provider_providerAccountId_key")
  @@index([userId], map: "idx_32769_Account_userId_idx")
}

model Session {
  id           String   @id(map: "idx_32788_PRIMARY") @default(cuid()) @db.VarChar(191)
  sessionToken String   @unique(map: "idx_32788_Session_sessionToken_key") @db.VarChar(191)
  userId       String   @db.VarChar(191)
  expires      DateTime @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_32788_Session_userId_idx")
}

model VerificationToken {
  identifier String   @db.VarChar(191)
  token      String   @unique(map: "idx_32798_VerificationToken_token_key") @db.VarChar(191)
  expires    DateTime @db.Timestamptz(6)

  @@unique([identifier, token], map: "idx_32798_VerificationToken_identifier_token_key")
}

model User {
  id            String    @id(map: "idx_32793_PRIMARY") @default(cuid()) @db.VarChar(191)
  name          String?   @db.VarChar(191)
  email         String?   @unique(map: "idx_32793_User_email_key") @db.VarChar(191)
  emailVerified DateTime? @db.Timestamptz(6)
  image         String?   @db.VarChar(191)
  accounts      Account[]
  sessions      Session[]
  games         Game[]
}

model Game {
  id         Int        @id(map: "idx_32780_PRIMARY") @unique(map: "idx_32780_Game_id_key")
  image      String?    @db.VarChar(191)
  playTime   Int
  maxPlayers Int
  minPlayers Int
  complexity Float
  title      String     @db.VarChar(191)
  users      User[]
  mechanics  Mechanic[]
}

model Mechanic {
  id           Int    @id(map: "idx_32784_PRIMARY") @unique(map: "idx_32784_Mechanic_id_key") @default(autoincrement())
  mechanicText String @db.VarChar(191)
  games        Game[]
}

model GameToMechanic {
  A Int
  B Int

  @@unique([A, B], map: "idx_32801__GameToMechanic_AB_unique")
  @@index([B], map: "idx_32801__GameToMechanic_B_index")
  @@map("_GameToMechanic")
}

model GameToUser {
  A Int
  B String @db.VarChar(191)

  @@unique([A, B], map: "idx_32804__GameToUser_AB_unique")
  @@index([B], map: "idx_32804__GameToUser_B_index")
  @@map("_GameToUser")
}
