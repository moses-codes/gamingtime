import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import Layout from "~/components/layout/Layout";

import { api } from "~/utils/api";

export default function Home() {

  return (
    <>
      <Head>
        < title > Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head >
      <Layout>
        <main className=" flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">

          <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
            <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
              Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
            </h1>
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
              <Link
                className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
                href="https://create.t3.gg/en/usage/first-steps"
                target="_blank"
              >
                <h3 className="text-2xl font-bold">First Steps →</h3>
                <div className="text-lg">
                  Just the basics - Everything you need to know to set up your
                  database and authentication.
                </div>
              </Link>
              <Link
                className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
                href="https://create.t3.gg/en/introduction"
                target="_blank"
              >
                <h3 className="text-2xl font-bold">Documentation →</h3>
                <div className="text-lg">
                  Learn more about Create T3 App, the libraries it uses, and how
                  to deploy it.
                </div>
              </Link>
            </div>
            <div className="flex flex-col items-center gap-2">
              <p className="text-2xl text-white">
                {/* {hello.data ? hello.data.greeting : "Loading tRPC query..."} */}
              </p>
              <AuthShowcase />
              {/* /*The auth showcase lets the user login by using the Discord provider of NextAuth. */}
            </div>
          </div>
        </main>
      </Layout>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();
  //use the useSession function from nextAuth
  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    //fetch the secretMessage from the example api router defined in trpc. 
    //this is the API -- instead of using REST syntax, we can access the backend using the useQuery function of trpc.
    undefined, // no input. this function doesn't require anything -- it simply returns the value. 
    { enabled: sessionData?.user !== undefined }
    //an object where enabled is set to a boolean that tells us if a user is present by accessing the session data. no session data, then it is set to false. 
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {/* //if sessionData, then display who is logged in. */}
        {secretMessage && <span> - {secretMessage}</span>}
        {/* //if secretMessage, which should exist because it is returned if sessionData && user, then display here. */}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {/* //note the void type, which indicates that there is no return value specified here. */}
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>

  );
}
