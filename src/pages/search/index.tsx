import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
// import Link from "next/link";
import React, { useState } from "react";
import Layout from "~/components/layout/Layout";

import SearchResult from "~/components/search/SearchResult";


import { api } from "~/utils/api";

type FormProps = {
    type: string
}

interface BoardGame {
    complexity: number;
    id: number;
    image: string;
    maxPlayers: number;
    minPlayers: number;
    playTime: number;
    title: string;
    mechanics: [];
}

export default function Search() {

    const [boardGames, setBoardGames] = useState<BoardGame[]>([])

    const { data: userGames } = api.boardGames.getUserGames.useQuery(undefined, {
        onSuccess: (data) => {
            setBoardGames(data)
        },
    });

    interface SearchResult {
        title: string;
        id: number;
        yearPublished: number;
        isInLibrary: boolean;
    }

    const [searchInput, setSearchInput] = useState('')
    const [searchResults, setSearchResults] = useState<SearchResult[]>([])

    async function handleSubmit(e: React.FormEvent) {
        e.preventDefault()
        let results: SearchResult[] = await boardGameSearch(searchInput)
        setSearchResults(results)
    }

    let searchResultList = (
        <ul>
            {searchResults.map((result) => {
                return <SearchResult title={result.title}
                    id={result.id}
                    key={result.id}
                    yearPublished={result.yearPublished}
                    isInLibrary={boardGames.find(el => el.id === result.id) ? true : false}
                />
            })}
        </ul>
    )

    return (
        <>
            <Layout>
                <Head>
                    <title>MeepleMatch: Add Game</title>
                    <meta name="description" content="Generated by create-t3-app" />
                    <link rel="icon" href="/3d-meeple-svgrepo-com.svg" />
                </Head>
                <main className=" flex min-h-screen flex-col items-center pt-5 bg-slate-300">
                    <h1 className="py-5 text-3xl">Search</h1>
                    <form onSubmit={handleSubmit} className="flex ">
                        <input type="text"
                            placeholder="Search by title"
                            className="input input-bordered w-full max-w-xs mb-5 mr-5"
                            value={searchInput}
                            onChange={(e) => setSearchInput(e.target.value)}
                        />
                        <button className="btn btn-outline btn-primary"
                            type="submit"
                        >search</button>
                    </form>

                    {searchResults && searchResultList
                    }
                </main>
            </Layout>
        </>
    );
}

interface Cache {
    [id: string]: number;
}

interface SearchResult {
    title: string,
    id: number,
    yearPublished: number,
    isInLibrary: boolean,
}

async function boardGameSearch(input: String) {
    const baseURLSearch = "https://boardgamegeek.com/xmlapi2/search?query="

    let idsCache: Cache = {}

    // let idSetter = 0

    const searchResults = await fetch(baseURLSearch + input + '&type=boardgame')
        .then(response => response.text())
        .then(data => {
            // console.log(data)
            return data
        })

    let xmlDocument = new DOMParser().parseFromString(searchResults, "text/xml")
    let boardGameResults = xmlDocument.querySelectorAll("item");

    let boardGames: SearchResult[] = []

    for (let game of boardGameResults) {
        let title: string = game.querySelector('name')?.getAttribute("value")!
        let id: number = Number(game.getAttribute('id'))
        let yearPublished: number = Number(game.querySelector('yearpublished')?.getAttribute("value")!)
        let isInLibrary: boolean = false

        if (idsCache[id]) {
            continue;
        } else {
            idsCache[id] = 1
            boardGames.push({
                title: title,
                id: id,
                yearPublished: yearPublished,
                isInLibrary: false
            })
        }
    }

    return boardGames
}