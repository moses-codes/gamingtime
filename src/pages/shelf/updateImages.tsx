// import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import Layout from "~/components/layout/Layout";

import Game from "~/components/game/Game";

import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

import { useState } from "react"

import { api } from "~/utils/api";
// import Image from "next/image";

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

interface BoardGame {
    complexity: number;
    id: number;
    image: string | null;
    maxPlayers: number;
    minPlayers: number;
    playTime: number;
    title: string;
    mechanics: Mechanic[];
}

interface Mechanic {
    id: number,
    mechanicText: string,
}

export default function Home() {




    const removeGame = api.boardGames.removeGameFromShelf.useMutation({
        // onSuccess: (removedGame) => {
        //     console.log(removedGame.title, ' has been removed from your shelf.')
        //     setBoardGames([...boardGames].filter(g => g.id !== removedGame.id))
        //     const notifyRemoved = () => {
        //         toast.info(`${removedGame.title} has been removed from your shelf.`, {
        //             position: toast.POSITION.TOP_RIGHT
        //         });
        //     }
        //     //toast notification
        //     notifyRemoved()
        // }
    });


    const handleChangeSort = (e: React.MouseEvent<HTMLButtonElement>) => {

        const target = e.target as HTMLButtonElement
        const input = target.id

        if (input === "alphaAz") {
            setBoardGames([...boardGames].sort((a, b) => a.title.localeCompare(b.title)))
        }
        if (input === "alphaZa") {
            setBoardGames([...boardGames].sort((a, b) => b.title.localeCompare(a.title)))
        }
        if (input === "complexityAsc") {
            setBoardGames([...boardGames].sort((a, b) => a.complexity - b.complexity))
        }
        if (input === "complexityDesc") {
            setBoardGames([...boardGames].sort((a, b) => b.complexity - a.complexity))
        }

    }

    const { isSuccess, data, error, isLoading } = api.boardGames.getUserGames.useQuery(undefined, {
        onSuccess: (data) => {
            // console.log(data)
            setBoardGames(data);
            // console.log('usergames are', data)
        },
    });

    const [boardGames, setBoardGames] = useState<BoardGame[]>(isSuccess ? data : [])

    const updateGameImages = api.boardGames.updateGameImages.useMutation({});

    async function updateImageForAllGames(games) {
        // Import Prisma Client

        try {
            // Loop through the games
            for (const game of games) {
                const url = "https://boardgamegeek.com/xmlapi2/thing?id=" + game.id;

                // Fetch data from the Board Games API
                const response = await fetch(url + '&stats=1');
                const data = await response.text();

                // Parse XML data
                const xmlDocument = new DOMParser().parseFromString(data, "text/xml");
                const thumbnailElement = xmlDocument.querySelector('image')?.textContent ?? '/meeple-group.svg';
                const newImageUrl: string = thumbnailElement;

                // Update the image source for the game in the database
                await updateGameImages.mutate({
                    id: Number(game.id),
                    imageUrl: newImageUrl,
                })

                console.log(`Updated image for game with id ${game.id}. New image URL: ${newImageUrl}`);
            }
        } catch (error) {
            console.error('Error updating images:', error);
        } finally {
            await prisma.$disconnect(); // Close Prisma connection
        }
    }

    // console.log(boardGames.length && 'loaded')



    // console.log('the usergames are', userGames)
    // gamesLoading ? console.log('loading') : console.log('games loaded', boardGames)

    function handleClick(e: React.MouseEvent<HTMLButtonElement>) {
        // console.log('clicked')
        const deletedGameId = Number(e.currentTarget.value);
        // console.log(deletedGameId)
        removeGame.mutate({ id: deletedGameId });
    }

    // console.log('the users games are: ', { boardGames })



    return (
        <>
            <Layout>
                <Head>
                    <title>MeepleMatch: Shelf</title>
                    <meta name="description" content="Generated by create-t3-app" />
                    <link rel="icon" href="/3d-meeple-svgrepo-com.svg" />
                </Head>
                <main className=" flex min-h-screen flex-col items-center bg-slate-300">
                    <h1 className="text-5xl pt-10 pb-4">Library</h1>
                    <div className="">

                        <button className='btn-primary'
                            onClick={() => updateImageForAllGames(boardGames)}
                        >Update Images</button>

                        <ul className="flex flex-wrap justify-around w-screen my-5  container mx-auto ">

                            {boardGames?.map(game => (
                                <Game id={game.id}
                                    key={game.id}
                                    title={game.title}
                                    image={game.image}
                                    minPlayers={game.minPlayers} maxPlayers={game.maxPlayers}
                                    playTime={game.playTime} complexity={game.complexity}
                                    mechanics={game.mechanics}
                                    handleClick={handleClick}
                                    isBeingDeleted={removeGame.isLoading}
                                />
                            ))}


                        </ul>
                    </div>
                </main>
            </Layout>
        </>
    );
}
